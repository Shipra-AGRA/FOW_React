npm install parcel@2.13.3
npm install react-router-dom@6.22.0 
-components 
1.header 
    -logo
    -nav-items,
2.body
    -search
    -restro-cards-container
        -restro-cards
            -name
            -rating
            -image
            -cuisine
            -delivery time 
3.footer
    -copyright
    -links

-config driven UI- when our website is driven by data i.e controlling the UI using data(config) and this config from backend.

-two types of export -> named export and default export

-whenever a state variable updates, react re-renders the component

-react uses reconciliation algorithm(also known as react fiber algo). it is the way of find the diff and updating the DOM.

-virtual DOM is the visual representation of actual DOM.

-separation of concerns or single responsibility principle where each service has its own job no one is interfering each other, this is known as microservice architecture and here each service can be written in different languages.
all the services are deployed on different ports and all these ports can be mapped to domain name. so for making call to different service, need to make call to different url's.
ex- 1234-/ 
    1000-/api
    2000-/sms

-loads->api call->render on UI
-loads->render UI->make api call->re-render UI  [always use this approach atleast we can see the skeleton]

-useEffect Hook is called after the UI renders. when the component will load, it will render the component and when this render cycle is finish it will call the callback function passed in useEffect.

-for debugging purpose go to inspect>sources>put a debugger.

-we cannot make call to swiggy's api due to CORS policy as swiggy blocked the localhost to make request to the api but we can do this by add a chrome extension "cors chrome extension".

-shimmer UI-> resembles the actual page UI until UI does not loads.

-rendering based on condition known as conditinal rendering.

-when state changes, react re-renders that whole component. ex-in case of header component react re-renders whole header component.

-We declare useState variables as constants, yet we can still update the state. This is because when we update the state, the component re-renders, creating a new variable with the updated value.

-react is faster bcz of react fibre, the new reconciliation algorithm that find out the diff b/w two virtual DOM's and updates the portion wherever required only.

-useEffect
    by deafult behaviour is to call on each render.
    if dependency array is not there the useEffect will call everytime when component renders. 
    if dependency array is empty then useEffect is called only on initial render(just once).
    if there are some dependencies then useEffect will be called everytime when the dependencies updates.

-useState is use to create local state variables inside functional component so it must be declared inside the component.

-npm i react-router-dom -> react router DOM library
configuration means information that will tell the browser router that what will happen on a specific path that we need to pass into our createBrowserRouter.
import createBrowserRouter and RouterProvider in App.js
createBrowserRouter will create the routing configuration.
RouterProvider will provide the routing configuration to our app
in case when we want to stick the header and change the body everytime we will use children routes.
Outlet is a component, whenver there is a change in the path, the outlet will be filled with the children according to the path on what page we are.

-should not use anchor tag for navigation bcz in that case the whole page get refreshed till we moved to a new route. use Link Component.

-there are 2 types of routing that we can have in our web applications- client side routing and server side routing.
SSR- if i click on my /about route the whole page gets refreshed. it sends the network call to /about page fetches the html and render it on webpage.
CSR- not making any network call while moving towards the page bcz the components are already loaded onto the app. that's why known as single page application bcz it's just single page, just the components getting intrechanged.

-graphql helps us with under fetching and over fetching of data.

-behind the scenes Link tag uses anchor tag. when we use Link tag in our page in developer console it still shows anchor tag this is bcz internally converted to anchor tag by react router dom.

-diff b/w CBC and FBC is fC is a function that returns some piece of JSX while CC have a render a render method that returns JSX.

-in case of FC, we pass the props and directly receive it but in case of CC, for receiving the props will use constructor.

-loading the CBC is creating the instance of a class and whenever this instance is created constructor called automatically and constructor is the best place to create state variables.
this.setState is used for updating states in CBC.

-when CBC loads an instance is created and at first constructor is called then render method is called in case of CBC.

-constructor->render->componentDidMount (so this is called when the component is already mounted on the DOM)
order: parent cons, parent render, child cons, child render, child mount, parent mount
componentDidMount is use to make api calls.

-In case of 1 parent and 2 child components
parent cons
parent render
    child1 cons
    child1 ren
    child2 cons
    child2 ren
    child1 didmount
    child2 didmount
parent didmount

-react has 2 phases: render(called constructor then render),commit(called component did mount)
for optimization purpose react batched the render and commit phase of child components. in commit phase DOM manipulation occurs. DOM is the very expensive task so react tries to batch up the DOM manipulation phase so it will optimises the performance of our app.

-Mounting
constructor
render
    html with dummy data
component did mount
    api call
    this.setState -> state variable is updated

Updating
render(api data)
    html (new api data)
component did update

-componentDidUpdate is called after component get mounted onto the dom. componentWillUnmount(suppose navigating to different link mean unmount the current one) is called just before component unmounted.
componentDidMount = useEffect with []
componentDidUpdate = useEffect with some dependency

-we cannot use async inside useEffect callback function bcz it always expect a cleanup function or nothing but not a promise
A cleanup function is a function returned by your useEffect that React will call:
before the component unmounts, or
before running the effect again (if dependencies change)

instead we can do this:
useEffect(() => { asyncFn(); }, [])

code splitting/chunking/dynamic bundling/lazy loading/on demand loading
inside dist folder there will be one js file that contains all the components code in just one file. but there might be certain issues if we have a large application as the size of the file increases. so we do lazy loading so that component will not load initially it will be loaded only when goes to that page for this seperate js file will be created. to do this we need to use lazy() function. we can check this js file inside network tab > beside fetch/XHR there is a JS there we can see js file.
even though new js file is created we still get the error page this is bcz when we click on specific link to render particular component, it took some time but react doesn't wait so it throws an error to fix this we need to use Suspense component. we need to wrap our lazy loaded component within this.